"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const types_1 = require("../types");
const allMethods = [...Object.keys(types_1.Methods), ...Object.values(types_1.Methods)];
function generateExpressRoutes(routes, baseRouter) {
    for (const route of routes) {
        if (route.type === types_1.Elements.Middleware &&
            route.path &&
            route.handle &&
            route.routes &&
            route.routes.length > 0) {
            const nextBaseRouter = express_1.default.Router();
            nextBaseRouter.use(route.handle);
            baseRouter.use(route.path, generateExpressRoutes(route.routes, nextBaseRouter));
        }
        else if (route.type === types_1.Elements.Middleware &&
            route.handle &&
            route.routes &&
            route.routes.length > 0) {
            const nextBaseRouter = express_1.default.Router();
            nextBaseRouter.use(route.handle);
            baseRouter.use(generateExpressRoutes(route.routes, nextBaseRouter));
        }
        else if (route.type === types_1.Elements.Middleware &&
            route.path &&
            route.handle &&
            route.routes &&
            route.routes.length === 0) {
            baseRouter.use(route.path, route.handle);
        }
        else if (route.type === types_1.Elements.Middleware && route.handle) {
            baseRouter.use(route.handle);
        }
        else if (route.type === types_1.Elements.Route &&
            route.path &&
            route.routes &&
            route.routes.length > 0) {
            const nextBaseRouter = express_1.default.Router(getRouterConfig(route));
            baseRouter.use(route.path, generateExpressRoutes(route.routes, nextBaseRouter));
        }
        else if (route.type === types_1.Elements.Route &&
            route.handle &&
            route.path &&
            route.method &&
            allMethods.includes(route.method)) {
            baseRouter[types_1.Methods[route.method] || route.method](route.path, route.handle);
        }
        else if (route.type === types_1.Elements.ErrorHandler && route.handle) {
            baseRouter.use(route.handle);
        }
        else if (route.type === types_1.Elements.ParamMiddleware &&
            route.handle &&
            !Array.isArray(route.handle) &&
            route.name) {
            baseRouter.param(route.name, route.handle);
        }
        else if (route.type === types_1.Elements.ParamMiddleware &&
            route.handle &&
            !Array.isArray(route.handle)) {
            baseRouter.param(route.handle);
        }
    }
    return baseRouter;
}
exports.generateExpressRoutes = generateExpressRoutes;
function compileRoute(node) {
    const baseRouter = express_1.default.Router();
    if (node.type !== types_1.Elements.Express && node.type !== types_1.Elements.Route) {
        throw new Error('The initial node must be Express or Route');
    }
    const route = generateExpressRoutes(node.routes, baseRouter);
    if (node.type === types_1.Elements.Express) {
        const app = express_1.default();
        app.use(node.path, route);
        return app;
    }
    return route;
}
exports.compileRoute = compileRoute;
function getRouterConfig(props) {
    if (props.caseSensitive !== undefined ||
        props.mergeParams !== undefined ||
        props.strict !== undefined) {
        return {
            caseSensitive: props.caseSensitive,
            mergeParams: props.mergeParams,
            strict: props.strict,
        };
    }
}
