"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const ErrorHandler_1 = __importDefault(require("./ErrorHandler"));
const Middleware_1 = __importDefault(require("./Middleware"));
const ParamMiddleware_1 = __importDefault(require("./ParamMiddleware"));
const Root_1 = __importDefault(require("./Root"));
const Express_1 = __importDefault(require("./Express"));
const Route_1 = __importDefault(require("./Route"));
function createInstance(type, props) {
    if (type === types_1.Elements.Express) {
        return new Express_1.default(types_1.Elements.Express, props);
    }
    else if (type === types_1.Elements.Root) {
        return new Root_1.default(types_1.Elements.Root, props);
    }
    else if (type === types_1.Elements.Middleware) {
        return new Middleware_1.default(types_1.Elements.Middleware, props);
    }
    else if (type === types_1.Elements.Route) {
        return new Route_1.default(types_1.Elements.Route, props);
    }
    else if (type === types_1.Elements.ErrorHandler) {
        return new ErrorHandler_1.default(types_1.Elements.ErrorHandler, props);
    }
    else if (type === types_1.Elements.ParamMiddleware) {
        return new ParamMiddleware_1.default(types_1.Elements.ParamMiddleware, props);
    }
    else {
        throw new Error(`${type} is not supported`);
    }
}
exports.createInstance = createInstance;
